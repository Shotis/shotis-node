// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package network

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ShotisServiceClient is the client API for ShotisService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShotisServiceClient interface {
	UploadImage(ctx context.Context, opts ...grpc.CallOption) (ShotisService_UploadImageClient, error)
	Health(ctx context.Context, in *HealthReportRequest, opts ...grpc.CallOption) (*HealthReport, error)
}

type shotisServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewShotisServiceClient(cc grpc.ClientConnInterface) ShotisServiceClient {
	return &shotisServiceClient{cc}
}

func (c *shotisServiceClient) UploadImage(ctx context.Context, opts ...grpc.CallOption) (ShotisService_UploadImageClient, error) {
	stream, err := c.cc.NewStream(ctx, &ShotisService_ServiceDesc.Streams[0], "/shotis.ShotisService/UploadImage", opts...)
	if err != nil {
		return nil, err
	}
	x := &shotisServiceUploadImageClient{stream}
	return x, nil
}

type ShotisService_UploadImageClient interface {
	Send(*UploadImageMessage) error
	CloseAndRecv() (*UploadImageResponse, error)
	grpc.ClientStream
}

type shotisServiceUploadImageClient struct {
	grpc.ClientStream
}

func (x *shotisServiceUploadImageClient) Send(m *UploadImageMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *shotisServiceUploadImageClient) CloseAndRecv() (*UploadImageResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadImageResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *shotisServiceClient) Health(ctx context.Context, in *HealthReportRequest, opts ...grpc.CallOption) (*HealthReport, error) {
	out := new(HealthReport)
	err := c.cc.Invoke(ctx, "/shotis.ShotisService/Health", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShotisServiceServer is the server API for ShotisService service.
// All implementations must embed UnimplementedShotisServiceServer
// for forward compatibility
type ShotisServiceServer interface {
	UploadImage(ShotisService_UploadImageServer) error
	Health(context.Context, *HealthReportRequest) (*HealthReport, error)
	mustEmbedUnimplementedShotisServiceServer()
}

// UnimplementedShotisServiceServer must be embedded to have forward compatible implementations.
type UnimplementedShotisServiceServer struct {
}

func (UnimplementedShotisServiceServer) UploadImage(ShotisService_UploadImageServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadImage not implemented")
}
func (UnimplementedShotisServiceServer) Health(context.Context, *HealthReportRequest) (*HealthReport, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Health not implemented")
}
func (UnimplementedShotisServiceServer) mustEmbedUnimplementedShotisServiceServer() {}

// UnsafeShotisServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShotisServiceServer will
// result in compilation errors.
type UnsafeShotisServiceServer interface {
	mustEmbedUnimplementedShotisServiceServer()
}

func RegisterShotisServiceServer(s grpc.ServiceRegistrar, srv ShotisServiceServer) {
	s.RegisterService(&ShotisService_ServiceDesc, srv)
}

func _ShotisService_UploadImage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ShotisServiceServer).UploadImage(&shotisServiceUploadImageServer{stream})
}

type ShotisService_UploadImageServer interface {
	SendAndClose(*UploadImageResponse) error
	Recv() (*UploadImageMessage, error)
	grpc.ServerStream
}

type shotisServiceUploadImageServer struct {
	grpc.ServerStream
}

func (x *shotisServiceUploadImageServer) SendAndClose(m *UploadImageResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *shotisServiceUploadImageServer) Recv() (*UploadImageMessage, error) {
	m := new(UploadImageMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ShotisService_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShotisServiceServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shotis.ShotisService/Health",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShotisServiceServer).Health(ctx, req.(*HealthReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ShotisService_ServiceDesc is the grpc.ServiceDesc for ShotisService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShotisService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "shotis.ShotisService",
	HandlerType: (*ShotisServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Health",
			Handler:    _ShotisService_Health_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadImage",
			Handler:       _ShotisService_UploadImage_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "proto/shotis.proto",
}
